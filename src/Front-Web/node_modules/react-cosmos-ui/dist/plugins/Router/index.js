import { isEqual } from 'lodash-es';
import { createPlugin } from 'react-plugin';
import { getUrlParams, pushUrlParams, subscribeToLocationChanges, } from '../../shared/url.js';
const { onLoad, register } = createPlugin({
    name: 'router',
    initialState: {
        urlParams: {},
    },
    methods: {
        getSelectedFixtureId,
        selectFixture,
        unselectFixture,
    },
});
onLoad(context => {
    const { setState } = context;
    setState({ urlParams: getUrlParams() });
    return subscribeToLocationChanges((urlParams) => {
        const { fixtureId } = context.getState().urlParams;
        const fixtureChanged = !isEqual(urlParams.fixtureId, fixtureId);
        setState({ urlParams }, () => {
            if (fixtureChanged) {
                emitFixtureChangeEvent(context);
            }
        });
    });
});
export { register };
if (process.env.NODE_ENV !== 'test')
    register();
function getSelectedFixtureId({ getState }) {
    return getState().urlParams.fixtureId || null;
}
function selectFixture(context, fixtureId) {
    setUrlParams(context, { fixtureId });
}
function unselectFixture(context) {
    setUrlParams(context, {});
}
function setUrlParams(context, nextUrlParams) {
    const { urlParams } = context.getState();
    const fixtureChanged = !isEqual(nextUrlParams.fixtureId, urlParams.fixtureId);
    const urlParamsEqual = isEqual(nextUrlParams, urlParams);
    context.setState({ urlParams: nextUrlParams }, () => {
        // Setting identical url params is considered a "reset" request
        if (fixtureChanged || urlParamsEqual) {
            emitFixtureChangeEvent(context);
        }
        if (!urlParamsEqual) {
            pushUrlParams(context.getState().urlParams);
        }
    });
}
function emitFixtureChangeEvent(context) {
    context.emit('fixtureChange', getSelectedFixtureId(context));
}
