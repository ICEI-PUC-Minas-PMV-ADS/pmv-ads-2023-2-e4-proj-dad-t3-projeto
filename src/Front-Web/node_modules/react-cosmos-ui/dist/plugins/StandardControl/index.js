import React, { useCallback, useMemo } from 'react';
import { createPlugin } from 'react-plugin';
import { ExpandCollapseValues } from '../../components/ValueInputTree/ExpandCollapseValues.js';
import { ValueInputTree } from '../../components/ValueInputTree/index.js';
import { useTreeExpansionStorage } from './storage.js';
const { namedPlug, plug, register } = createPlugin({
    name: 'standardControl',
});
plug('control-standard', ({ pluginContext, slotProps }) => {
    const { controlName, control, onFixtureStateChange } = slotProps;
    const treeExpansionApi = useTreeExpansionStorage(pluginContext);
    const values = useMemo(() => ({ [controlName]: control.currentValue }), [control.currentValue, controlName]);
    const handleValueChange = useCallback((updatedValues) => {
        onFixtureStateChange(fixtureState => ({
            ...fixtureState,
            controls: {
                ...fixtureState.controls,
                [controlName]: {
                    ...control,
                    currentValue: updatedValues[controlName],
                },
            },
        }));
    }, [control, controlName, onFixtureStateChange]);
    return (React.createElement(ValueInputTree, { id: `control-${controlName}`, values: values, onValueChange: handleValueChange, ...treeExpansionApi }));
});
namedPlug('controlAction', 'expandCollapse', ({ pluginContext, slotProps }) => {
    const { controls } = slotProps;
    const treeExpansionApi = useTreeExpansionStorage(pluginContext);
    return (React.createElement(ExpandCollapseValues, { values: extractValuesFromStandardControls(controls), ...treeExpansionApi }));
});
function extractValuesFromStandardControls(controls) {
    const values = {};
    Object.keys(controls).forEach(controlName => {
        const control = controls[controlName];
        if (control.type === 'standard')
            values[controlName] = control.currentValue;
    });
    return values;
}
export { register };
if (process.env.NODE_ENV !== 'test')
    register();
