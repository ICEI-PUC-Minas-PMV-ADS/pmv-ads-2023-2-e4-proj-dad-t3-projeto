import { find, isEqual } from 'lodash-es';
import { removeItemMatch, replaceOrAddItem, updateItem, } from '../utils/array.js';
export function getFixtureStateClassState(fixtureState, decoratorId) {
    const { classState } = fixtureState;
    return classState
        ? classState.filter(s => s.elementId.decoratorId === decoratorId)
        : [];
}
export function findFixtureStateClassState(fixtureState, elementId) {
    const { classState } = fixtureState;
    return classState && find(classState, s => isEqual(s.elementId, elementId));
}
export function createFixtureStateClassState({ fixtureState, elementId, values, componentName, }) {
    const { classState = [] } = fixtureState;
    return replaceOrAddItem(classState, createClassStateMatcher(elementId), {
        elementId,
        values,
        componentName,
    });
}
export function updateFixtureStateClassState({ fixtureState, elementId, values, }) {
    const classStateItem = expectFixtureStateClassState(fixtureState, elementId);
    return updateItem(fixtureState.classState, classStateItem, {
        values,
    });
}
export function removeFixtureStateClassState(fixtureState, elementId) {
    return removeItemMatch(fixtureState.classState || [], createClassStateMatcher(elementId));
}
function createClassStateMatcher(elementId) {
    return (p) => isEqual(p.elementId, elementId);
}
function expectFixtureStateClassState(fixtureState, elementId) {
    const classStateItem = findFixtureStateClassState(fixtureState, elementId);
    if (!classStateItem) {
        const elId = JSON.stringify(elementId);
        throw new Error(`Fixture state class state missing for element "${elId}"`);
    }
    return classStateItem;
}
