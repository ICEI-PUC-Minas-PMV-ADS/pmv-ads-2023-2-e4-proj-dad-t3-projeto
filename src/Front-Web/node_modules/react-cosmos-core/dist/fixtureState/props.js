import { find, isEqual } from 'lodash-es';
import { removeItemMatch, replaceOrAddItem, updateItem, } from '../utils/array.js';
export const DEFAULT_RENDER_KEY = 0;
export function getFixtureStateProps(fixtureState, decoratorId) {
    const { props } = fixtureState;
    return props
        ? props.filter(p => p.elementId.decoratorId === decoratorId)
        : [];
}
export function findFixtureStateProps(fixtureState, elementId) {
    const { props } = fixtureState;
    return props && find(props, p => isEqual(p.elementId, elementId));
}
export function createFixtureStateProps({ fixtureState, elementId, values, componentName, }) {
    const { props = [] } = fixtureState;
    return replaceOrAddItem(props, createPropsMatcher(elementId), {
        elementId,
        values,
        renderKey: DEFAULT_RENDER_KEY,
        componentName,
    });
}
export function resetFixtureStateProps({ fixtureState, elementId, values, }) {
    const propsItem = expectFixtureStateProps(fixtureState, elementId);
    return updateItem(fixtureState.props, propsItem, {
        values,
        renderKey: propsItem.renderKey + 1,
    });
}
export function updateFixtureStateProps({ fixtureState, elementId, values, }) {
    const propsItem = expectFixtureStateProps(fixtureState, elementId);
    return updateItem(fixtureState.props, propsItem, {
        values,
    });
}
export function removeFixtureStateProps(fixtureState, elementId) {
    return removeItemMatch(fixtureState.props || [], createPropsMatcher(elementId));
}
function createPropsMatcher(elementId) {
    return (p) => isEqual(p.elementId, elementId);
}
function expectFixtureStateProps(fixtureState, elementId) {
    const propsItem = findFixtureStateProps(fixtureState, elementId);
    if (!propsItem) {
        const elId = JSON.stringify(elementId);
        throw new Error(`Fixture state props missing for element "${elId}"`);
    }
    return propsItem;
}
