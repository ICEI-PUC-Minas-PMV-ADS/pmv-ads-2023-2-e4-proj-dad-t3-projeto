import React from 'react';
import { FixtureLoader } from './FixtureLoader.js';
import { FixtureStateChangeResponse } from './FixtureStateChangeResponse.js';
import { LazyFixtureLoader } from './LazyFixtureLoader.js';
import { useRendererRequest } from './useRendererRequest.js';
import { useRendererResponse } from './useRendererResponse.js';
import { useSelectedFixture } from './useSelectedFixture.js';
export function FixtureConnect({ rendererId, rendererConnect, moduleWrappers, systemDecorators, initialFixtureId, selectedFixtureId, onErrorReset, renderMessage = defaultRenderMessage, renderNoFixtureSelected = true, }) {
    const { selectedFixture, setSelectedFixture, setFixtureState } = useSelectedFixture(initialFixtureId, selectedFixtureId);
    useRendererRequest(rendererId, rendererConnect, moduleWrappers, setSelectedFixture, onErrorReset);
    useRendererResponse(rendererId, rendererConnect, moduleWrappers, initialFixtureId);
    if (!selectedFixture) {
        return renderNoFixtureSelected
            ? renderMessage('No fixture selected.')
            : null;
    }
    const { fixtureId, fixtureState, renderKey } = selectedFixture;
    if (!moduleWrappers.fixtures[fixtureId.path]) {
        return renderMessage(`Fixture path not found: ${fixtureId.path}`);
    }
    return (React.createElement(React.Fragment, null,
        moduleWrappers.lazy ? (React.createElement(LazyFixtureLoader, { rendererId: rendererId, rendererConnect: rendererConnect, fixtureWrapper: moduleWrappers.fixtures[fixtureId.path], decorators: moduleWrappers.decorators, systemDecorators: systemDecorators, fixtureId: fixtureId, fixtureState: fixtureState, setFixtureState: setFixtureState, renderMessage: renderMessage, renderKey: renderKey, onErrorReset: onErrorReset })) : (React.createElement(FixtureLoader, { fixtureWrapper: moduleWrappers.fixtures[fixtureId.path], decorators: moduleWrappers.decorators, systemDecorators: systemDecorators, fixtureId: fixtureId, fixtureState: fixtureState, setFixtureState: setFixtureState, renderMessage: renderMessage, renderKey: renderKey, onErrorReset: onErrorReset })),
        React.createElement(FixtureStateChangeResponse, { rendererId: rendererId, rendererConnect: rendererConnect, selectedFixture: selectedFixture, setSelectedFixture: setSelectedFixture })));
}
function defaultRenderMessage(msg) {
    return React.createElement(React.Fragment, null, msg);
}
