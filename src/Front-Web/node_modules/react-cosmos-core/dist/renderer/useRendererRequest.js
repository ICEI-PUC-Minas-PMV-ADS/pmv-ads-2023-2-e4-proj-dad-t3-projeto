import { isEqual } from 'lodash-es';
import { useEffect } from 'react';
import { getFixtureListFromWrappers } from './getFixtureList.js';
export function useRendererRequest(rendererId, rendererConnect, moduleWrappers, setSelectedFixture, onErrorReset) {
    useEffect(() => {
        function postReadyState() {
            const fixtures = getFixtureListFromWrappers(moduleWrappers);
            rendererConnect.postMessage({
                type: 'rendererReady',
                payload: { rendererId, fixtures },
            });
        }
        function fireChangeCallback() {
            if (typeof onErrorReset === 'function') {
                onErrorReset();
            }
        }
        function handleSelectFixtureRequest({ payload }) {
            const { fixtureId, fixtureState } = payload;
            setSelectedFixture(prev => {
                return {
                    fixtureId,
                    fixtureState,
                    syncedFixtureState: fixtureState,
                    renderKey: prev ? prev.renderKey + 1 : 0,
                };
            });
        }
        function handleUnselectFixtureRequest() {
            setSelectedFixture(null);
        }
        function handleSetFixtureStateRequest({ payload }) {
            const { fixtureId, fixtureState } = payload;
            setSelectedFixture(prev => {
                // Ensure fixture state applies to currently selected fixture
                if (prev && isEqual(prev.fixtureId, fixtureId)) {
                    return {
                        ...prev,
                        fixtureState,
                        syncedFixtureState: fixtureState,
                    };
                }
                else {
                    return prev;
                }
            });
        }
        const unsubscribe = rendererConnect.onMessage((msg) => {
            if (msg.type === 'pingRenderers') {
                return postReadyState();
            }
            if (!msg.payload || msg.payload.rendererId !== rendererId) {
                return;
            }
            const doesRequestChangeFixture = msg.type === 'selectFixture' || msg.type === 'unselectFixture';
            if (doesRequestChangeFixture) {
                fireChangeCallback();
            }
            switch (msg.type) {
                case 'selectFixture':
                    return handleSelectFixtureRequest(msg);
                case 'unselectFixture':
                    return handleUnselectFixtureRequest();
                case 'setFixtureState':
                    return handleSetFixtureStateRequest(msg);
                default:
                // Ignore all other messages, which could be unrelated browser
                // devtools communications.
            }
        });
        return () => {
            unsubscribe();
        };
    }, [
        moduleWrappers,
        onErrorReset,
        rendererConnect,
        rendererId,
        setSelectedFixture,
    ]);
}
