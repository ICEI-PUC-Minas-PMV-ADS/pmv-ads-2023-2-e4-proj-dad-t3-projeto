import React, { useMemo } from 'react';
import { DecoratedFixture } from './DecoratedFixture.js';
import { getFixture } from './getFixture.js';
import { getSortedDecoratorsForFixturePath } from './getSortedDecoratorsForFixturePath.js';
import { LazyFixtureListItemUpdate } from './LazyFixtureListItemUpdate.js';
import { useLazyFixtureModules } from './useLazyFixtureModules.js';
export function LazyFixtureLoader({ rendererId, rendererConnect, fixtureWrapper, decorators, systemDecorators, fixtureId, fixtureState, setFixtureState, renderMessage, renderKey, onErrorReset, }) {
    const decoratorWrappers = useMemo(() => getSortedDecoratorsForFixturePath(fixtureId.path, decorators), [decorators, fixtureId.path]);
    const modules = useLazyFixtureModules(fixtureId.path, fixtureWrapper, decoratorWrappers);
    if (!modules) {
        return null;
    }
    const { fixtureModule, decoratorModules } = modules;
    const fixtureExport = fixtureModule.default;
    const fixture = getFixture(fixtureExport, fixtureId.name);
    if (typeof fixture === 'undefined') {
        return renderMessage(`Invalid fixture name: ${fixtureId.name}`);
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(DecoratedFixture, { fixture: fixture, systemDecorators: systemDecorators, userDecoratorModules: decoratorModules, fixtureState: fixtureState, setFixtureState: setFixtureState, renderKey: renderKey, onErrorReset: onErrorReset }),
        React.createElement(LazyFixtureListItemUpdate, { rendererId: rendererId, rendererConnect: rendererConnect, fixturePath: fixtureId.path, fixtureModule: fixtureModule })));
}
