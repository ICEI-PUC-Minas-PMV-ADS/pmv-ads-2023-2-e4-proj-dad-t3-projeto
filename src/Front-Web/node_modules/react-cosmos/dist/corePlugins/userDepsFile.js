import fs from 'fs/promises';
import path from 'path';
import { getPlaygroundUrl } from '../shared/playgroundUrl.js';
import { startFixtureWatcher } from '../userDeps/fixtureWatcher.js';
import { generateUserDepsModule } from '../userDeps/generateUserDepsModule.js';
import { getCliArgs } from '../utils/cli.js';
export const userDepsFileServerPlugin = {
    name: 'userDepsFile',
    async devServer(args) {
        if (!shouldGenerateUserDepsFile(args.platformType))
            return;
        const { cosmosConfig } = args;
        await generateUserDepsFile(cosmosConfig);
        const watcher = await startFixtureWatcher(cosmosConfig, 'all', () => {
            generateUserDepsFile(cosmosConfig);
        });
        return () => {
            watcher.close();
        };
    },
};
function shouldGenerateUserDepsFile(platformType) {
    return (platformType === 'native' ||
        // CLI support for --external-userdeps flag (useful with react-native-web)
        Boolean(getCliArgs().externalUserdeps));
}
async function generateUserDepsFile(cosmosConfig) {
    const { userDepsFilePath } = cosmosConfig;
    const rendererConfig = {
        playgroundUrl: getPlaygroundUrl(cosmosConfig),
    };
    const userDepsModule = generateUserDepsModule({
        cosmosConfig,
        rendererConfig,
        relativeToDir: path.dirname(userDepsFilePath),
    });
    await fs.writeFile(userDepsFilePath, userDepsModule, 'utf8');
    const relUserDepsFilePath = path.relative(process.cwd(), userDepsFilePath);
    console.log(`[Cosmos] Generated ${relUserDepsFilePath}`);
}
