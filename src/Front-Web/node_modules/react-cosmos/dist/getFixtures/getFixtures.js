import path from 'path';
import { createFixtureTree, flattenFixtureTree, getDecoratedFixtureElement, getFixtureListFromExports, getSortedDecoratorsForFixturePath, stringifyPlaygroundUrlQuery, stringifyRendererUrlQuery, } from 'react-cosmos-core';
import { RENDERER_FILENAME } from '../shared/playgroundHtml.js';
import { resolveRendererUrl } from '../shared/resolveRendererUrl.js';
import { getUserModules } from '../userDeps/getUserModules.js';
export function getFixtures(cosmosConfig) {
    const { fixturesDir, fixtureFileSuffix, rootDir } = cosmosConfig;
    const fixtureInfo = [];
    const { fixtures, decorators } = getUserModules(cosmosConfig);
    const fixtureList = getFixtureListFromExports(fixtures);
    const fixtureTree = createFixtureTree({
        fixtures: fixtureList,
        fixturesDir,
        fixtureFileSuffix,
    });
    const flatFixtureTree = flattenFixtureTree(fixtureTree);
    flatFixtureTree.forEach(({ fileName, fixtureId, name, parents }) => {
        const fixtureExport = fixtures[fixtureId.path];
        const fixture = fixtureId.name === undefined
            ? fixtureExport
            : fixtureExport[fixtureId.name];
        const treePath = [...parents, fileName];
        if (name)
            treePath.push(name);
        fixtureInfo.push({
            absoluteFilePath: path.join(rootDir, fixtureId.path),
            fileName,
            getElement: createFixtureElementGetter(fixture, fixtureId.path, decorators),
            name,
            parents,
            playgroundUrl: getPlaygroundUrl(cosmosConfig, fixtureId),
            relativeFilePath: fixtureId.path,
            rendererUrl: getRendererUrl(cosmosConfig, fixtureId),
            treePath,
        });
    });
    return fixtureInfo;
}
function getPlaygroundUrl(cosmosConfig, fixtureId) {
    const host = getPlaygroundHost(cosmosConfig);
    const query = stringifyPlaygroundUrlQuery({ fixtureId });
    return `${host}/?${query}`;
}
function getRendererUrl(cosmosConfig, fixtureId) {
    const { publicUrl, rendererUrl } = cosmosConfig;
    const query = stringifyRendererUrlQuery({ _fixtureId: fixtureId });
    if (rendererUrl)
        return `${rendererUrl}?${query}`;
    const host = getPlaygroundHost(cosmosConfig);
    const urlPath = resolveRendererUrl(publicUrl, RENDERER_FILENAME);
    return new URL(`${urlPath}?${query}`, host).toString();
}
function getPlaygroundHost({ hostname, port, https }) {
    return `${https ? 'https' : 'http'}://${hostname || 'localhost'}:${port}`;
}
function createFixtureElementGetter(fixture, fixturePath, decoratorsByPath) {
    const decorators = getSortedDecoratorsForFixturePath(fixturePath, decoratorsByPath);
    return () => getDecoratedFixtureElement(fixture, decorators, {
        fixtureState: {},
        setFixtureState: () => { },
        onErrorReset: () => { },
    });
}
