import fs from 'fs';
import { readFile } from 'fs/promises';
import path from 'path';
import { pkgUpSync } from 'pkg-up';
import { replaceKeys, } from 'react-cosmos-core';
import { findUserModulePaths } from '../userDeps/findUserModulePaths.js';
import { userDepsKeyPath } from '../userDeps/userDepsShared.js';
import { resolveRendererUrl } from './resolveRendererUrl.js';
import { getStaticPath } from './staticPath.js';
export const RENDERER_FILENAME = '_renderer.html';
export async function getDevPlaygroundHtml(platformType, cosmosConfig, pluginConfigs) {
    const { ui } = cosmosConfig;
    return getPlaygroundHtml({
        playgroundConfig: {
            ...ui,
            core: await getDevCoreConfig(platformType, cosmosConfig),
            rendererCore: { fixtures: getFixtureList(cosmosConfig) },
        },
        pluginConfigs,
    });
}
export async function getExportPlaygroundHtml(cosmosConfig, pluginConfigs) {
    const { ui } = cosmosConfig;
    return getPlaygroundHtml({
        playgroundConfig: {
            ...ui,
            core: await getExportCoreConfig(cosmosConfig),
            rendererCore: { fixtures: getFixtureList(cosmosConfig) },
        },
        pluginConfigs,
    });
}
async function getDevCoreConfig(platformType, cosmosConfig) {
    switch (platformType) {
        case 'native':
            return {
                ...(await getSharedCoreConfig(cosmosConfig)),
                devServerOn: true,
                webRendererUrl: null,
            };
        case 'web':
            return {
                ...(await getSharedCoreConfig(cosmosConfig)),
                devServerOn: true,
                webRendererUrl: cosmosConfig.rendererUrl ||
                    resolveRendererUrl(cosmosConfig.publicUrl, RENDERER_FILENAME),
            };
        default:
            throw new Error(`Invalid platform type: ${platformType}`);
    }
}
async function getExportCoreConfig(cosmosConfig) {
    return {
        ...(await getSharedCoreConfig(cosmosConfig)),
        devServerOn: false,
        webRendererUrl: resolveRendererUrl(cosmosConfig.publicUrl, RENDERER_FILENAME),
    };
}
async function getSharedCoreConfig(cosmosConfig) {
    const { rootDir, fixturesDir, fixtureFileSuffix } = cosmosConfig;
    return {
        projectId: await getProjectId(rootDir),
        fixturesDir,
        fixtureFileSuffix,
    };
}
async function getProjectId(rootDir) {
    const pkgPath = pkgUpSync({ cwd: rootDir });
    if (!pkgPath) {
        return rootDir.split(path.sep).pop();
    }
    try {
        const pkg = JSON.parse(await readFile(pkgPath, 'utf8'));
        return pkg.name || 'new-project';
    }
    catch (err) {
        console.log('Failed to read package.json');
        console.log(err);
        return 'new-project';
    }
}
function getPlaygroundHtml(playgroundArgs) {
    return replaceKeys(getPlaygroundHtmlTemplate(), {
        __PLAYGROUND_ARGS: JSON.stringify(playgroundArgs),
    });
}
function getPlaygroundHtmlTemplate() {
    return fs.readFileSync(getStaticPath('index.html'), 'utf8');
}
function getFixtureList(cosmosConfig) {
    const { fixturePaths } = findUserModulePaths(cosmosConfig);
    return fixturePaths.reduce((acc, fixturePath) => ({
        ...acc,
        [userDepsKeyPath(fixturePath, cosmosConfig.rootDir)]: { type: 'single' },
    }), {});
}
